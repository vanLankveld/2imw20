package shell.parser;

import model.queries.NodeQuery;
import java.util.HashSet;
import shell.ast.Command;
import shell.Shell;
import model.queries.GraphQuery;
import model.queries.Direction;
import java.util.Set;
import model.SubGraph;
import beaver.*;
import model.queries.Pair;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "queries.grammar".
 */
public class TCMQueryParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short SEMICOLON = 1;
		static public final short PAR_CLOSE = 2;
		static public final short PAR_OPEN = 3;
		static public final short STRING = 4;
		static public final short COMMA = 5;
		static public final short NUMBER = 6;
		static public final short CREATE = 7;
		static public final short QUERY = 8;
		static public final short BENCHMARK = 9;
		static public final short SHOWSUMMARY = 10;
		static public final short EDGE = 11;
		static public final short PATH = 12;
		static public final short NODE = 13;
		static public final short SUBGRAPH = 14;
		static public final short BRACE_OPEN = 15;
		static public final short BRACE_CLOSE = 16;
		static public final short DIR_IN = 17;
		static public final short DIR_OUT = 18;
		static public final short DIR_UNI = 19;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9ozr8Ll544Kn$7VNKiDAbXfWNglYaEnAjGeb2fLN8DhSFT0mZ#8knPt2Zo#UxTtlIOG0ZJ" +
		"CvhCpztRUxSpixaYweXv5AKQnYjDmwrUa8kGTY6XOM7k4KhHGtVPDHIhM9FkgUBiQZ8RgL8" +
		"tN14rKcgfLerhLgLxfcgnSpTGYjQXHoxH0ynMjkVRPFjb7#w0a5MYE4ZHFYHgfCHgbqHghP" +
		"8spz$REtjeRUsslLA9IPTXBPTeBPIbRESgJJuNsJFdsr9vecgROSqtLTCsmFitIR4bbzbZb" +
		"AbELtLU5AksUtRKxTbkBxPOQj8GUIzLiDzMg9hNR3NMeJLrstQwfat7uny2yKkddp2ay4jw" +
		"ETjT8ZDuPkrZ5eb0qMAShGvd#aViOUJvpBlIlQZmp3zRZMN4FQ#TnZoXccSXJII8#Z3hAhR" +
		"sX7iwHIru4TIG2LmFFqSklm3bmDP375JF$zK2lGCx07SDxEEseGRNJG#ez9Nz9WBCwJYpDZ" +
		"PMwTJagK8ag$mgA9o$U4fuBgb63EjIY7WreH1FoqOmMjA8DxLY63dIY6ylHXHNEkB0IiLY5" +
		"7gp6Mgp3Ucp06cp4Pcp25fHW6xPYEvptPoTskVFPWTtOYprEp8qNOnyEu20EuJ2EO3#EuIY" +
		"EumHEuhIRVWPdSHxdS04NSGcNW$SmupimwtFR$S7uKA34$KDkvb$aJFzPFgNiDtanGpNdN$" +
		"n$hqB5lkEB$aknXw7M0tlqXxd6oSUNvO6N7KhmiFTusP#yx52UGPBPPSOHJwSTBeFlDnDPo" +
		"6Olo24MbCkNd#RVaoBykrCA#Jv#XyiZ9ny5A4GgiU8VtId0qm==");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	private final Action[] actions;

	public TCMQueryParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] lst$Statement = Statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [1] lst$Statement = lst$Statement Statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [2] opt$lst$Statement = 
			Action.RETURN,	// [3] opt$lst$Statement = lst$Statement
			RETURN2,	// [4] StatementSequence = Statement opt$lst$Statement; returns 'opt$lst$Statement' although none is marked
			RETURN2,	// [5] Statement = StatementBody SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [6] StatementBody = CreateCommand
			Action.RETURN,	// [7] StatementBody = QueryCommand
			Action.RETURN,	// [8] StatementBody = BenchMarkCommand
			Action.RETURN,	// [9] StatementBody = ShowCommand
			new Action() {	// [10] CreateCommand = CREATE PAR_OPEN STRING.f COMMA NUMBER.s COMMA NUMBER.b COMMA STRING.g COMMA STRING.d PAR_CLOSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final int s = (int) _symbol_s.value;
					final Symbol _symbol_b = _symbols[offset + 7];
					final int b = (int) _symbol_b.value;
					final Symbol _symbol_g = _symbols[offset + 9];
					final String g = (String) _symbol_g.value;
					final Symbol _symbol_d = _symbols[offset + 11];
					final String d = (String) _symbol_d.value;
					 Shell.CreateGraphSummary(f, s, b, g, d); return new Command("CreateCommand");
				}
			},
			new Action() {	// [11] QueryCommand = QUERY GraphQuery.q
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_q = _symbols[offset + 2];
					final GraphQuery q = (GraphQuery) _symbol_q.value;
					 Shell.executeQuery(q); return new Command("QueryCommand");
				}
			},
			Action.RETURN,	// [12] GraphQuery = EdgeQuery
			Action.RETURN,	// [13] GraphQuery = NodeQuery
			Action.RETURN,	// [14] GraphQuery = PathQuery
			Action.RETURN,	// [15] GraphQuery = SubGraphQuery
			new Action() {	// [16] EdgeQuery = EDGE PAR_OPEN STRING.a COMMA STRING.b PAR_CLOSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final String b = (String) _symbol_b.value;
					 return Shell.createEdgeQuery(a, b);
				}
			},
			new Action() {	// [17] NodeQuery = NODE PAR_OPEN STRING.l COMMA Direction.d PAR_CLOSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 3];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_d = _symbols[offset + 5];
					final Direction d = (Direction) _symbol_d.value;
					 return Shell.createNodeQuery(l, d);
				}
			},
			new Action() {	// [18] PathQuery = PATH PAR_OPEN STRING.a COMMA STRING.b PAR_CLOSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final String b = (String) _symbol_b.value;
					 return Shell.createPathQuery(a, b);
				}
			},
			new Action() {	// [19] SubGraphQuery = SUBGRAPH PAR_OPEN SubGraph.g PAR_CLOSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_g = _symbols[offset + 3];
					final SubGraph g = (SubGraph) _symbol_g.value;
					 return Shell.createSubGraphQuery(g);
				}
			},
			new Action() {	// [20] Direction = DIR_IN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Direction(Direction.DirectionEnum.IN);
				}
			},
			new Action() {	// [21] Direction = DIR_OUT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Direction(Direction.DirectionEnum.OUT);
				}
			},
			new Action() {	// [22] Direction = DIR_UNI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Direction(Direction.DirectionEnum.UNDIRECTED);
				}
			},
			new Action() {	// [23] SubGraph = BRACE_OPEN SubGraphBody.b BRACE_CLOSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_b = _symbols[offset + 2];
					final SubGraph b = (SubGraph) _symbol_b.value;
					 return b;
				}
			},
			new Action() {	// [24] SubGraphBody = SubGraphEdge.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Pair<String, String> e = (Pair<String, String>) _symbol_e.value;
					 Set<Pair<String, String>> b = new HashSet<>(); b.add(e); return new SubGraph(b);
				}
			},
			new Action() {	// [25] SubGraphBody = SubGraphBody.b COMMA SubGraphEdge.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_b = _symbols[offset + 1];
					final SubGraph b = (SubGraph) _symbol_b.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Pair<String, String> e = (Pair<String, String>) _symbol_e.value;
					 b.getEdges().add(e); return b;
				}
			},
			new Action() {	// [26] SubGraphEdge = PAR_OPEN STRING.a COMMA STRING.b PAR_CLOSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 4];
					final String b = (String) _symbol_b.value;
					 return new Pair<String, String>(a, b);
				}
			},
			RETURN2,	// [27] BenchMarkCommand = BENCHMARK BenchMarkBody; returns 'BenchMarkBody' although none is marked
			Action.RETURN,	// [28] BenchMarkBody = EdgeBenchmark
			Action.RETURN,	// [29] BenchMarkBody = NodeBenchmark
			Action.RETURN,	// [30] BenchMarkBody = PathBenchmark
			Action.RETURN,	// [31] BenchMarkBody = SubGraphBenchmark
			new Action() {	// [32] EdgeBenchmark = EDGE PAR_OPEN NUMBER.n PAR_CLOSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final int n = (int) _symbol_n.value;
					 Shell.BenchmarkEdgeQuery(n); return new Command("EdgeBenchMark");
				}
			},
			new Action() {	// [33] NodeBenchmark = NODE PAR_OPEN NUMBER.n PAR_CLOSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final int n = (int) _symbol_n.value;
					 Shell.BenchmarkNodeQuery(n); return new Command("NodeBenchmark");
				}
			},
			new Action() {	// [34] PathBenchmark = PATH PAR_OPEN NUMBER.n PAR_CLOSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final int n = (int) _symbol_n.value;
					 Shell.BenchmarkPathQuery(n); return new Command("PathBenchmark");
				}
			},
			new Action() {	// [35] SubGraphBenchmark = SUBGRAPH PAR_OPEN NUMBER.n PAR_CLOSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final int n = (int) _symbol_n.value;
					 Shell.BenchmarkSubGraphQuery(n); return new Command("SubGraphBenchmark");
				}
			},
			new Action() {	// [36] ShowCommand = SHOWSUMMARY
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 Shell.showSummary(); return new Command("ShowCommand");
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
